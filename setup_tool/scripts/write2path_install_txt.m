%% write2path_install_txt
% Opens (do_fast == 1), writes in and closes (do_fast == 1) file path_install.txt
%
function write2path_install_txt(bibpath, varargin)
%% Release: 1.2

%%

error( nargchk(1, 4, nargin, 'struct') );
error( nargoutchk(0, 0, nargout, 'struct') );

%%
% check input parameters

if ~ischar(bibpath)
  error(['The 1st parameter bibpath must be a ', ...
         '<a href="matlab:doc(''char'')">char</a>, but is a ', ...
         '<a href="matlab:doc(''%s'')">%s</a>!'], ...
         class(bibpath), class(bibpath));
end

if nargin < 2
  inuninstall= @addpath;
else
  inuninstall= varargin{1};
end

if ~isa(inuninstall, 'function_handle')
  error(['The 2nd parameter inuninstall must be a ', ...
         '<a href="matlab:doc(''function_handle'')">function_handle</a>, ', ...
         'but is a <a href="matlab:doc(''%s'')">%s</a>!'], ...
         class(inuninstall), class(inuninstall));
end

if ~strcmp( func2str(inuninstall), 'addpath') && ...
   ~strcmp( func2str(inuninstall), 'rmpath')
  error(['The parameter inuninstall must be either ', ...
         '@addpath or @rmpath, but is @%s', func2str(inuninstall)]); 
end

if nargin >= 3, fileID= varargin{2}; else fileID= 0; end;

validateattributes(fileID, {'double'}, ...
                   {'scalar', 'nonnegative', 'integer'}, ...
                   mfilename, 'fileID', 3);

if nargin >= 4 && ~isempty(varargin{3})
  file_op_cl= varargin{3};
  validateattributes(file_op_cl, {'double'}, ...
                     {'scalar', 'nonnegative', 'integer'}, ...
                     mfilename, 'file_op_cl', 4);
else
  file_op_cl= 1;
end

%%

if file_op_cl % then addpath2toolbox_fast failed, thus try to create path_install.txt
  % in tool folder, such that next matlab start is faster
  % addpath2toolbox_fast fails when the path_install.txt file does not
  % exist in the mtools folder

  [fileID, message]= fopen(fullfile(bibpath, 'path_install.txt'), 'w');

  if fileID == -1
    errordlg(['Installation failed. Could not open the file ', ...
             [fullfile(bibpath, 'path_install.txt'), '. '], ...
             'Got the message: ', message]);
  end

end

%%

rel_path_m= getToolboxFolderStructure(bibpath);


%% 
% add respectively remove the path

for ifolder= 1:numel(rel_path_m)

  %%
  % classen ordner nicht hinzufügen
  if isempty( regexp( rel_path_m{ifolder}, '+', 'once' ) ) && ...
     isempty( regexp( rel_path_m{ifolder}, '@', 'once' ) )

    fevalLog(inuninstall, ...
           fullfile(bibpath, strrep(rel_path_m{ifolder}, '\', filesep)), ...
           fileID);

  end

end

%%

if file_op_cl && fileID > 0
  status= fclose(fileID);

  if status == 0
    disp(['Successfully written to file ', ...
          [fullfile(bibpath, 'path_install.txt'), '.']]);
  else
    errordlg(['Writing to path_install.txt failed. Could not close the file ', ...
           [fullfile(bibpath, 'path_install.txt'), '.']]);
  end
end

%%
  
  

%%
%
function fevalLog(inuninstall, string, varargin)

%%
% readout varargin

if nargin >= 3, fileID= varargin{1}; else fileID= 0; end;

if ~isnumeric(fileID)
  error(['The 3rd parameter fileID is not numeric, but of class ', ...
         class(fileID)]);
end


%%

feval(inuninstall, string);

if fileID ~= 0

  string= regexprep(string, '\', '\\\');

  % to read in the file 'path_install.txt' later to set the path of a
  % installed toolbox fast, it is easier if the pathsep (;) is used. then
  % it is a string in the format as generated by genpath
  %fprintf(fileID, [string, '\r\n']);
  fprintf(fileID, [string, pathsep]);
  
end

%%


